// 1. Basic Syntax and Fundamentals (20 Questions)
1. Write a program to print "Hello, World!" to the console.
2. Create a program to take two integers as input and print their sum.
3. Write a program to check if a given number is odd or even.
4. Create a program to find the largest of three numbers using conditional statements.
5. Write a program to print the multiplication table of a number.
6. Create a program that takes an integer and prints its factorial.
7. Write a program to find whether a number is prime or not.
8. Write a program to swap two numbers without using a third variable.
9. Create a program that takes an array of numbers and finds the smallest element.
10. Write a program to reverse an array in place.
11. Create a program to find the sum of all elements in an array.
12. Write a program to check whether a string is a palindrome.
13. Create a program to count the number of vowels and consonants in a string.
14. Write a program to print the Fibonacci sequence up to `n` terms.
15. Create a program to remove duplicate elements from an array.
16. Write a program to sort an array of integers in ascending order (without using built-in functions).
17. Write a program to find the second largest number in an array.
18. Create a program to calculate the average of elements in an array.
19. Write a program to search for an element in an array using linear search.
20. Write a program to check if a number is an Armstrong number.

// 2. Object-Oriented Programming (OOP) (25 Questions)
21. Define a class `Car` with properties like `model`, `brand`, and `year`. Create objects of the class.
22. Implement getter and setter methods for the `Car` class and demonstrate encapsulation.
23. Create a class hierarchy where `Dog` and `Cat` inherit from the class `Animal`. Implement method overriding.
24. Create an interface `Shape` with methods `area()` and `perimeter()`. Implement the interface for classes `Circle` and `Rectangle`.
25. Implement method overloading for a class `Calculator` with methods to add two integers, two doubles, and two floats.
26. Write a program demonstrating the use of `this` keyword in Java.
27. Implement a constructor and a method to display the details of a class Person.
28. Demonstrate how static variables and methods work using a `Student` class.
29. Create an abstract class `BankAccount` with a method `calculateInterest`. Extend it in classes `SavingsAccount` and `CurrentAccount`.
30. Write a program where a Vehicle class is extended by a Car class, demonstrating the use of super to access the base class's properties.
31. Create a class `Book` with multiple constructors (constructor overloading).
32. Write a program to create a Configuration class that loads settings from a file.
33. Demonstrate inner class and static inner class concepts by implementing an online store
34. Create a class `Employee` with a method `getDetails()`. Demonstrate polymorphism by creating subclasses `Manager` and `Developer` with different implementations of `getDetails()`.
35. Create a class ComplexNumber and implement methods for adding and subtracting two complex numbers.
36. Write a program to create a class that stores a list of integers, demonstrating how to create copies of the list.
37. Implement a `toString()` method for a class `Product` to print its details in a readable format.
38. Write a program to create and compare objects using the `equals()` method.
39. Implement a custom `Comparator` for sorting a list of `Person` objects by their age.
40. Write a program to demonstrate the concept of **final classes** and **final methods**.
41. Create an interface `Payment` with a method `processPayment()`. Implement it in classes `CreditCardPayment` and `PaypalPayment`. Also use anonymous class
42. Create a class `University` with static inner classes `Department` and `Course`.
43. Write a program to demonstrate **downcasting** and **upcasting** in a class hierarchy.
44. Create a **builder pattern** implementation for a class `House`.
45. Implement a simple **factory pattern** that creates different types of `Transport` objects based on input.

// 3. Data Structures and Algorithms (20 Questions)
46. Write a program to implement **bubble sort**.
47. Implement a **binary search** algorithm.
48. Write a program to reverse a linked list.
49. Implement a **queue** using an array.
50. Write a program to implement a **stack** using a linked list.
51. Implement an algorithm to check if a string has balanced parentheses using a stack.
52. Write a program to find the **minimum and maximum** in an array in a single pass.
53. Create a **binary search tree** and implement `insert()` and `search()` operations.
54. Write a program to implement **insertion sort**.
55. Implement **selection sort** algorithm.
56. Write a program to find the **longest common subsequence** of two strings.
57. Implement **merge sort**.
58. Write a program to find the **GCD (Greatest Common Divisor)** of two numbers using recursion.
59. Implement **quick sort** algorithm.
60. Write a program to remove duplicates from a linked list.
61. Create a **priority queue** using a heap.
62. Write a program to find the **first non-repeating character** in a string.
63. Implement a **graph** using an adjacency list and perform **BFS (Breadth-First Search)**.
64. Write a program to find the **shortest path** in a graph using **Dijkstraâ€™s Algorithm**.
65. Implement a **hash table** with collision handling using chaining.

// 4. Exception Handling (5 Questions)
66. Write a program that handles `ArithmeticException` when dividing a number by zero.
67. Create a custom exception `InvalidAgeException` and handle it in a program.
68. Write a program that handles multiple exceptions using a single `try-catch` block.
69. Implement a program that uses a `finally` block for resource cleanup.
70. Demonstrate throwing and catching an exception using the `throw` and `throws` keywords.

// 5. File Handling and I/O Streams (5 Questions)
71. Write a program to read from a text file and print its contents.
72. Write a program to write a list of strings to a text file.
73. Implement a program to read and write objects using **ObjectInputStream** and **ObjectOutputStream**.
74. Write a program to copy the contents of one file to another.
75. Implement a program to append data to an existing file.

// 6. Java Collections Framework (10 Questions)
76. Create a list of integers using `ArrayList` and sort it in ascending order.
77. Write a program to remove duplicates from a `HashSet`.
78. Implement a program that uses a `HashMap` to store student names and their grades. Perform operations like adding, removing, and retrieving entries.
79. Write a program to iterate through a `LinkedList` using both `for` and `iterator`.
80. Create a program that uses a `TreeSet` to store and sort a list of unique words from a text file.
81. Write a program to demonstrate the use of `Comparator` to sort objects.
82. Create a program to demonstrate the difference between `HashMap` and `TreeMap`.
83. Write a program to demonstrate the use of a simple cache using a HashMap, where items can be added and retrieved.
84. Demonstrate the usage of `Queue` and `Deque` interfaces in a simple program.
85. Write a program to merge two sorted lists using `Collections` utility methods.

// 7. Basic Multithreading (5 Questions)
86. Write a program to create and run two threads using the `Thread` class.
87. Implement a program that demonstrates thread synchronization using `synchronized` keyword.
88. Write a program that demonstrates inter-thread communication using `wait()` and `notify()`.
89. Create a program to implement a simple **Producer-Consumer** problem using threads.
90. Write a program to demonstrate the usage of `ExecutorService` for running multiple tasks in parallel.

// 8. Java 8 Features (5 Questions)
91. Write a program to use a lambda expression to sort a list of strings.
92. Implement a program that uses the **Stream API** to filter and print even numbers from a list.
93. Write a program that demonstrates the use of `Optional` class in Java 8.
94. Create a program that uses a `Predicate` functional interface to filter a list of employees by age.
95. Write a program to demonstrate the use of `forEach` method in Java 8 streams.

// 9. Mini Projects (10 Questions)
96. Build a simple console-based **Library Management System** with classes for `Book`, `Member`, and `Library`.
97. Implement a basic **Banking System** with classes for `Account`, `Transaction`, and `Customer`.
98. Create a console-based **Tic-Tac-Toe** game.
99. Build a **Student Management System** with CRUD operations for adding, deleting, and modifying student details.
100. Write a program to create a simple to-do list application that allows users to add tasks and view the list of tasks.
